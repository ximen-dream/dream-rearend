server:
  port: 7301

spring:
  application:
    name: Dream-Gateway-Zuul
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
  boot:
    admin:
      client:
        url: http://localhost:7401
        username: dream
        password: dream
info:
  app:
    name: ${spring.application.name}
    description: "@project.description@"
    version: "@project.version@"

management:
  endpoints:
    web:
      exposure:
        include: '*' #表示将SBA客户端的所有监控端点都暴露给SBA服务端；
  endpoint:
    health:
      show-details: ALWAYS # 表示总是展示详细的健康信息

eureka:
  instance:
    lease-renewal-interval-in-seconds: 20
  client:
    register-with-eureka: true
    fetch-registry: true
    instance-info-replication-interval-seconds: 30
    registry-fetch-interval-seconds: 3
    serviceUrl:
      defaultZone: http://dream:dream@localhost:7001/register-eureka/eureka/

zuul:
  SendErrorFilter:
    error:
      disable: true # 让默认的异常过滤器失效
  routes:
    auth:
      path: /auth/**
      serviceId: Dream-Auth
      sensitiveHeaders: "*" #表示不过滤请求头信息
    system:
      path: /system/**
      serviceId: Dream-Server-System
      sensitiveHeaders: "*"
    test:
      path: /test/**
      serviceId: Dream-Server-Test
      sensitiveHeaders: "*"
  retryable: true  # 设置为true时，表示开启重试机制；
  ignored-services: "*" # Zuul配合Eureka后会有一套默认的配置规则，这里我们只想请求根据我们显示配置的路由规则走，所以设置为*，表示关闭所有默认路由配置规则
  ribbon:
    eager-load:
      enabled: true
      # Zuul内部通过Ribbon按照一定的负载均衡算法来获取服务，Ribbon进行客户端负载均衡的Client并不是在服务启动的时候就初始化好的，而是在调用的时候才会去创建相应的Client，所以第一次调用的耗时不仅仅包含发送HTTP请求的时间，还包含了创建RibbonClient的时间，这样一来如果创建时间速度较慢，同时设置的超时时间又比较短的话，第一次请求很容易出现超时的情况。设置为true的时候表示开启Ribbon的饥饿加载模式，即在应用启动的时候就去获取相应的Client备用。
      #ribbon.ReadTimeout，设置请求超时时间，单位为毫秒；

ribbon:
  ReadTimeout: 3000